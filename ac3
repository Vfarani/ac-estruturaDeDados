package main

import (
	"fmt"
)

type contato struct {
	nome  string
	email string
}

func (c *contato) AlterarEmail(novoEmail string) {
	c.email = novoEmail
}

func adicionarContato(novoContato contato, arrayContatos []*contato) {
	for i, c := range arrayContatos {
		if c == nil {
			arrayContatos[i] = &novoContato
			fmt.Println("Contato adicionado com sucesso!")
			return
		}
	}
	fmt.Println("O array de contatos está cheio. Não foi possível adicionar o contato.")
}

func excluirContato(arrayContatos []*contato) {
	for i := len(arrayContatos) - 1; i >= 0; i-- {
		if arrayContatos[i] != nil {
			arrayContatos[i] = nil
			fmt.Println("Último contato excluído com sucesso!")
			return
		}
	}
	fmt.Println("O array de contatos está vazio. Não há contatos para excluir.")
}

func main() {
	arrayContatos := make([]*contato, 5)

	for {
		var opcao int
		fmt.Println("\nEscolha uma opção:")
		fmt.Println("1. Adicionar contato")
		fmt.Println("2. Excluir último contato")
		fmt.Println("3. Sair")

		fmt.Print("Opção: ")
		fmt.Scanln(&opcao)

		switch opcao {
		case 1:
			var nome, email string
			fmt.Print("Nome do contato: ")
			fmt.Scanln(&nome)
			fmt.Print("E-mail do contato: ")
			fmt.Scanln(&email)
			novoContato := contato{nome: nome, email: email}
			adicionarContato(novoContato, arrayContatos)
		case 2:
			excluirContato(arrayContatos)
		case 3:
			fmt.Println("Saindo...")
			return
		default:
			fmt.Println("Opção inválida. Tente novamente.")
		}

		fmt.Println("\nContatos:")
		for _, c := range arrayContatos {
			if c != nil {
				fmt.Printf("Nome: %s, Email: %s\n", c.nome, c.email)
			}
		}
	}
}
